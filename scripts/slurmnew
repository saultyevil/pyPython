#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""Generate a *.slurm file for a Python simulation.

This script can also be used to update an already existing .slurm file,
for example if one wishes to restart a Python simulation.
"""

import argparse

from pypython import create_slurm_file


def parse_arguments():
    """Get arguments from the command line to set up the script.

    Returns
    -------
    args.name: str
        The name of the slurm file
    args.ncores: int
        The number of CPUs to use
    args.thours: int
        The maximum run time allowed + 1 hours
    args.tminutes: int
        The number of minutes allowed.
    args.root: str
        The root name of the Python simulation
    args.flags: str
        Any flags to pass to Python
    args.pyrun: str
        Flags which control pyrun
    """

    p = argparse.ArgumentParser(description=__doc__)
    p.add_argument("name", help="The name of the slurm file, i.e. name.slurm.")
    p.add_argument("root", help="The root name of the model.")
    p.add_argument("ncores", type=int, help="The number of CPUs to use.")
    p.add_argument("hours", type=int, help="The number of hours of run time allowed.")
    p.add_argument("minutes", type=int, help="The number of minutes of additional run time allowed.")
    p.add_argument("-py", default="", help="Flags to pass to PYTHON.")
    p.add_argument("-pr", default="", help="Flags to pass to py_run.py")
    args = p.parse_args()

    return args.name, args.ncores, args.hours, args.minutes, args.root, args.py, args.pr


def main():
    """Main function of the script."""

    name, n_cores, n_hours, n_minutes, root, py_flags, pyrun_flags = parse_arguments()
    create_slurm_file(name, n_cores, n_hours, n_minutes, py_flags, pyrun_flags)


if __name__ == "__main__":
    main()
